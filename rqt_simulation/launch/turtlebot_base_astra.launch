<?xml version="1.0"?>

<launch>


    <arg name="robot_name" default="robot1" />

    <arg name="3d_sensor" default="$(env TURTLEBOT_3D_SENSOR)"/>  <!-- r200, kinect, asus_xtion_pro -->

    <group ns="$(arg robot_name)" >
        <!-- Turtlebot -->
        <arg name="base"              default="$(env TURTLEBOT_BASE)"         doc="mobile base type [create, roomba]"/>
        <arg name="battery"           default="$(env TURTLEBOT_BATTERY)"      doc="kernel provided locatio for battery info, use /proc/acpi/battery/BAT0 in 2.6 or earlier kernels." />
        <arg name="stacks"            default="$(env TURTLEBOT_STACKS)"       doc="stack type displayed in visualisation/simulation [circles, hexagons]"/>
        <arg name="simulation"        default="false"                         doc="set flags to indicate this turtle is run in simulation mode."/>
        <arg name="serialport"        default="$(env TURTLEBOT_SERIAL_PORT)"  doc="used by create to configure the port it is connected on [/dev/ttyUSB0, /dev/ttyS0]"/>
        <arg name="robot_type"        default="$(env TURTLEBOT_TYPE)"         doc="just in case you are considering a 'variant' and want to make use of this."/>

        <param name="/use_sim_time" value="$(arg simulation)"/>

        <include file="$(find turtlebot_bringup)/launch/includes/description.launch.xml">
          <arg name="base" value="$(arg base)" />
          <arg name="stacks" value="$(arg stacks)" />
          <arg name="3d_sensor" value="$(arg 3d_sensor)" />
        </include>

        <!-- important generally, but specifically utilised by the current app manager -->
        <param name="robot/name" value="$(optenv ROBOT turtlebot)"/>
        <param name="robot/type" value="turtlebot"/>

        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
          <param name="publish_frequency" type="double" value="5.0" />
          <param name="tf_prefix" type="string" value="$(arg robot_name)"/>
        </node>
        <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator" >
          <rosparam command="load" file="$(find turtlebot_bringup)/param/$(arg base)/diagnostics.yaml" />
        </node>

        <!-- mobile base nodelet manager -->
        <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager">
          <param name="tf_prefix" value="$(arg robot_name)"/>
        </node>

        <arg name="manager" value="mobile_base_nodelet_manager"/>

        <node pkg="nodelet" type="nodelet" name="mobile_base" args="load kobuki_node/KobukiNodelet $(arg manager)">
          <rosparam file="$(find kobuki_node)/param/base.yaml" command="load"/>
          <param name="device_port" value="$(arg serialport)" />
          <param name="tf_prefix" value="$(arg robot_name)" />
          <param name="odom_frame" value="$(arg robot_name)/odom"/>
          <param name="base_frame" value="$(arg robot_name)/base_footprint"/>

          <remap from="mobile_base/odom" to="odom"/>
          <!-- Don't do this - force applications to use a velocity mux for redirection
            <remap from="mobile_base/commands/velocity" to="cmd_vel"/>
          -->
          <remap from="mobile_base/enable" to="enable"/>
          <remap from="mobile_base/disable" to="disable"/>
          <remap from="mobile_base/joint_states" to="joint_states"/>
        </node>

        <!-- bumper/cliff to pointcloud
        <include file="$(find turtlebot_bringup)/launch/includes/kobuki/bumper2pc.launch.xml"/>
-->
        <node pkg="nodelet" type="nodelet" name="bumper2pointcloud" args="load kobuki_bumper2pc/Bumper2PcNodelet mobile_base_nodelet_manager">
          <param name="pointcloud_radius" value="0.24"/>
          <param name="base_link_frame" value="$(arg robot_name)/base_link" />
          <remap from="bumper2pointcloud/pointcloud"   to="mobile_base/sensors/bumper_pointcloud"/>
          <remap from="bumper2pointcloud/core_sensors" to="mobile_base/sensors/core"/>
        </node>

        <!-- velocity commands multiplexer -->
        <node pkg="nodelet" type="nodelet" name="cmd_vel_mux" args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
          <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml"/>
          <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
        </node>

        <!--
        <include file="$(find turtlebot_bringup)/launch/includes/mobile_base.launch.xml">
          <arg name="base" value="$(arg base)" />
          <arg name="serialport" value="$(arg serialport)" />
        </include>
      -->
<!--
        <include file="$(find turtlebot_bringup)/launch/3dsensor.launch">
          <arg name="rgb_processing" value="false" />
          <arg name="depth_registration" value="false" />
          <arg name="depth_processing" value="false" />
        -->

          <!-- We must specify an absolute topic name because if not it will be prefixed by "$(arg camera)".
               Probably is a bug in the nodelet manager: https://github.com/ros/nodelet_core/issues/7
          <arg name="scan_topic" value="/$(arg robot_name)/scan" />
        </include>
-->

<!-- "camera" should uniquely identify the device. All topics are pushed down
     into the "camera" namespace, and it is prepended to tf frame ids. -->

        <arg name="camera"      default="camera"/>
        <arg name="publish_tf"  default="false"/>

        <!-- Factory-calibrated depth registration -->
        <arg name="depth_registration"              default="true"/>
        <arg     if="$(arg depth_registration)" name="depth" value="depth_registered" />
        <arg unless="$(arg depth_registration)" name="depth" value="depth" />

        <!-- Processing Modules -->
        <arg name="rgb_processing"                  default="false"/>
        <arg name="ir_processing"                   default="true"/>
        <arg name="depth_processing"                default="true"/>
        <arg name="depth_registered_processing"     default="true"/>
        <arg name="disparity_processing"            default="true"/>
        <arg name="disparity_registered_processing" default="true"/>
        <arg name="scan_processing"                 default="true"/>

        <!-- Worker threads for the nodelet manager -->
        <arg name="num_worker_threads" default="4" />

        <!-- Laserscan topic -->
        <arg name="scan_topic" default="/$(arg robot_name)/scan"/>

        <!--
        <include file="$(find navigation_under_namespace)/launch/includes/$(arg 3d_sensor).launch">
          <arg name="camera"                          value="$(arg camera)"/>
          <arg name="publish_tf"                      value="$(arg publish_tf)"/>
          <arg name="depth_registration"              value="$(arg depth_registration)"/>
          <arg name="num_worker_threads"              value="$(arg num_worker_threads)" />
          <arg name="namespace"	value="$(arg robot_name)"/>
          -->
          <!-- Processing Modules
          <arg name="rgb_processing"                  value="$(arg rgb_processing)"/>
          <arg name="ir_processing"                   value="$(arg ir_processing)"/>
          <arg name="depth_processing"                value="$(arg depth_processing)"/>
          <arg name="depth_registered_processing"     value="$(arg depth_registered_processing)"/>
          <arg name="disparity_processing"            value="$(arg disparity_processing)"/>
          <arg name="disparity_registered_processing" value="$(arg disparity_registered_processing)"/>
        </include>
        -->

        <!-- "camera" should uniquely identify the device. All topics are pushed down
     into the "camera" namespace, and it is prepended to tf frame ids. -->
          <!-- Factory-calibrated depth registration -->


          <include file="$(find astra_launch)/launch/astra.launch">
            <arg name="camera"                          value="$(arg camera)"/>
            <arg name="publish_tf"                      value="$(arg publish_tf)"/>
            <arg name="depth_registration"              value="$(arg depth_registration)"/>
            <arg name="num_worker_threads"              value="$(arg num_worker_threads)" />

            <!-- Processing Modules -->
            <arg name="rgb_processing"                  value="$(arg rgb_processing)"/>
            <arg name="ir_processing"                   value="$(arg ir_processing)"/>
            <arg name="depth_processing"                value="$(arg depth_processing)"/>
            <arg name="depth_registered_processing"     value="$(arg depth_registered_processing)"/>
            <arg name="disparity_processing"            value="$(arg disparity_processing)"/>
            <arg name="disparity_registered_processing" value="$(arg disparity_registered_processing)"/>
          </include>

         <!--                        Laserscan
           This uses lazy subscribing, so will not activate until scan is requested.
         -->
        <group if="$(arg scan_processing)">
          <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan" args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet $(arg camera)/$(arg camera)_nodelet_manager">
            <!-- Pixel rows to use to generate the laserscan. For each column, the scan will
                 return the minimum value for those pixels centered vertically in the image. -->
            <param name="scan_height" value="10"/>
            <param name="output_frame_id" value="/$(arg robot_name)/$(arg camera)_depth_frame"/>
            <param name="range_min" value="0.45"/>
            <remap from="image" to="$(arg camera)/$(arg depth)/image_raw"/>
            <remap from="scan" to="$(arg scan_topic)"/>

            <!-- Somehow topics here get prefixed by "$(arg camera)" when not inside an app namespace,
                 so in this case "$(arg scan_topic)" must provide an absolute topic name (issue #88).
                 Probably is a bug in the nodelet manager: https://github.com/ros/nodelet_core/issues/7 -->
            <remap from="$(arg camera)/image" to="$(arg camera)/$(arg depth)/image_raw"/>
            <remap from="$(arg camera)/scan" to="$(arg scan_topic)"/>
          </node>

          <!-- Move base
          <include file="$(find turtlebot_navigation)/launch/includes/velocity_smoother.launch.xml"/>
          <include file="$(find turtlebot_navigation)/launch/includes/safety_controller.launch.xml"/>

          <arg name="odom_frame_id"   default="$(arg robot_name)/odom"/>
          <arg name="base_frame_id"   default="$(arg robot_name)/base_footprint"/>
          <arg name="global_frame_id" default="$(arg robot_name)/map"/>
          <arg name="odom_topic" default="odom" />
          <arg name="laser_topic" default="scan" />
          <arg name="custom_param_file" default="$(find turtlebot_navigation)/param/dummy.yaml"/>

          <node pkg="move_base" type="move_base" respawn="false" name="move_base" clear_params="true" output="screen">
            <rosparam file="$(find rqt_simulation)/config/planner/costmap_common_params.yaml" command="load" ns="global_costmap" />
            <rosparam file="$(find rqt_simulation)/config/planner/costmap_common_params.yaml" command="load" ns="local_costmap" />
            <rosparam file="$(find rqt_simulation)/config/planner/local_costmap_params.yaml" command="load" />
            <rosparam file="$(find rqt_simulation)/config/planner/global_costmap_params.yaml" command="load" />
            <rosparam file="$(find rqt_simulation)/config/planner/dwa_local_planner_params.yaml" command="load" />
            <rosparam file="$(find rqt_simulation)/config/planner/move_base_params.yaml" command="load" />
            <rosparam file="$(find turtlebot_navigation)/param/global_planner_params.yaml" command="load" />
            <rosparam file="$(find turtlebot_navigation)/param/navfn_global_planner_params.yaml" command="load" />
-->
            <!-- external params file that could be loaded into the move_base namespace
            <rosparam file="$(arg custom_param_file)" command="load" />

            <param name="base_global_planner" value="global_planner/GlobalPlanner"/>
            <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>
-->
            <!-- reset frame_id parameters using user input data 
            <param name="global_costmap/global_frame" value="$(arg global_frame_id)"/>
            <param name="global_costmap/robot_base_frame" value="$(arg base_frame_id)"/>
            <param name="local_costmap/global_frame" value="$(arg odom_frame_id)"/>
            <param name="local_costmap/robot_base_frame" value="$(arg base_frame_id)"/>
            <param name="DWAPlannerROS/global_frame_id" value="$(arg odom_frame_id)"/>

            <remap from="cmd_vel" to="navigation_velocity_smoother/raw_cmd_vel"/>
            <remap from="odom" to="$(arg odom_topic)"/>
            <remap from="scan" to="$(arg laser_topic)"/>
          </node>
-->
        </group>


    </group>

</launch>
