<?xml version="1.0"?>

<launch>

    <arg name="scenario" default="sml" /> <!-- Empty scenario to make sure it is consistent if required -->
    <arg name="scenario_path" default="$(find rqt_simulation)/scenarios/$(arg scenario)" />

    <arg name="base"      value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba -->
    <arg name="battery"   value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 -->
    <arg name="stacks"    value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
    <arg name="3d_sensor" default="$(env TURTLEBOT_3D_SENSOR)"/>

    <arg name="robot_name" default="/" />
    <arg name="initial_pose_x" default="0" />
    <arg name="initial_pose_y" default="0" />
    <arg name="initial_pose_a" default="0" />

    <arg name="use_qualisys" default="false" />

    <!-- TF from qualisys to map -->
    <arg name="trans_x" default="0.111"/>
    <arg name="trans_y" default="0.105"/>
    <arg name="trans_z" default="0.0"/>
    <arg name="orient_x" default="0.0"/>
    <arg name="orient_y" default="0.0"/>
    <arg name="orient_z" default="0.358"/>
    <arg name="orient_w" default="0.934"/>

    <arg name="urdf_file" default="$(find xacro)/xacro.py '$(find turtlebot_description)/robots/$(arg base)_$(arg stacks)_$(arg 3d_sensor).urdf.xacro'" />
    <param name="robot_description" command="$(arg urdf_file)" />

    <arg name="custom_amcl_launch_file" default="$(find turtlebot_navigation)/launch/includes/amcl/$(arg 3d_sensor)_amcl.launch.xml"/>

    <arg name="gzpose" value="-x $(arg initial_pose_x) -y $(arg initial_pose_y) -z 0.0 -R 0.0 -P 0.0 -Y $(arg initial_pose_a)"/>
    <node pkg="tf" type="static_transform_publisher" name="$(arg robot_name)_qualisys" args="$(arg trans_x) $(arg trans_y) $(arg trans_z) $(arg orient_x) $(arg orient_y) $(arg orient_z) $(arg orient_w) qualisys /map 100"/>
    <node pkg="tf" type="static_transform_publisher" name="$(arg robot_name)_bc" args="0 0 0 0 0 0 1 map $(arg robot_name)/map 100"/>
    <!--
    <node pkg="tf" type="static_transform_publisher" name="$(arg robot_name)_mapping" args="0 0 0 0 0 0 1 turtlebo1_qualisys/footprint $(arg robot_name)/base_footprint 100"/>
    -->
        <!-- Map server -->
        <arg name="map_file" default="$(arg scenario_path)/map.yaml"/>
        <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)">
          <param name="frame_id" value="/map" />
        </node>

        <!-- AMCL -->
        <include file="$(arg custom_amcl_launch_file)">
          <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
          <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
          <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
          <arg name="odom_frame_id"   value="$(arg robot_name)/odom"/>
          <arg name="base_frame_id"   value="$(arg robot_name)/base_footprint"/>
          <arg name="scan_topic"      default="scan"/>
          <arg name="global_frame_id" value="$(arg robot_name)/map"/>
        </include>


        <!-- Move base -->
        <include file="$(find turtlebot_navigation)/launch/includes/velocity_smoother.launch.xml"/>
        <include file="$(find turtlebot_navigation)/launch/includes/safety_controller.launch.xml"/>
<!--
        <arg name="odom_frame_id"   default="$(arg robot_name)/odom"/>
        <arg name="base_frame_id"   default="$(arg robot_name)/base_footprint"/>

        <group if="$(arg use_qualisys)">
          <arg name="odom_frame_id"   value="$(arg robot_name)/qualisys_odom"/>
          <arg name="base_frame_id"   value="$(arg robot_name)/qualisys_base_footprint"/>
        </group>


        <group unless="$(arg use_qualisys)">
          <arg name="odom_frame_id"   default="$(arg robot_name)/odom"/>
          <arg name="base_frame_id"   default="$(arg robot_name)/base_footprint"/>
        </group>
        -->

        <arg name="global_frame_id" default="$(arg robot_name)/map"/>
        <arg name="odom_topic" default="odom" />
        <arg name="laser_topic" default="scan" />
        <arg name="custom_param_file" default="$(find turtlebot_navigation)/param/dummy.yaml"/>


<!----> <group if="$(arg use_qualisys)">
          <node pkg="move_base" type="move_base" respawn="false" name="move_base" clear_params="true" output="screen">
            <rosparam file="$(find rqt_simulation)/config/planner/costmap_common_params.yaml" command="load" ns="global_costmap" />
            <rosparam file="$(find rqt_simulation)/config/planner/costmap_common_params.yaml" command="load" ns="local_costmap" />
            <rosparam file="$(find rqt_simulation)/config/planner/local_costmap_params.yaml" command="load" />
            <rosparam file="$(find rqt_simulation)/config/planner/global_costmap_params.yaml" command="load" />
            <rosparam file="$(find rqt_simulation)/config/planner/dwa_local_planner_params.yaml" command="load" />
            <rosparam file="$(find rqt_simulation)/config/planner/move_base_params.yaml" command="load" />
            <rosparam file="$(find turtlebot_navigation)/param/global_planner_params.yaml" command="load" />
            <rosparam file="$(find turtlebot_navigation)/param/navfn_global_planner_params.yaml" command="load" />

            <!-- external params file that could be loaded into the move_base namespace -->
            <rosparam file="$(arg custom_param_file)" command="load" />

            <param name="base_global_planner" value="global_planner/GlobalPlanner"/>
            <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>

            <!-- reset frame_id parameters using user input data -->
            <param name="global_costmap/global_frame" value="$(arg global_frame_id)"/>
            <param name="global_costmap/robot_base_frame" value="$(arg robot_name)/base_footprint"/>
            <param name="local_costmap/global_frame" value="$(arg robot_name)/qualisys_odom"/>
            <param name="local_costmap/robot_base_frame" value="$(arg robot_name)/base_footprint"/>
            <param name="DWAPlannerROS/global_frame_id" value="$(arg robot_name)/qualisys_odom"/>

            <remap from="cmd_vel" to="navigation_velocity_smoother/raw_cmd_vel"/>
            <remap from="odom" to="$(arg odom_topic)"/>
            <remap from="scan" to="$(arg laser_topic)"/>
          </node>
        </group>

        <group unless="$(arg use_qualisys)">
          <node pkg="move_base" type="move_base" respawn="false" name="move_base" clear_params="true" output="screen">
            <rosparam file="$(find rqt_simulation)/config/planner/costmap_common_params.yaml" command="load" ns="global_costmap" />
            <rosparam file="$(find rqt_simulation)/config/planner/costmap_common_params.yaml" command="load" ns="local_costmap" />
            <rosparam file="$(find rqt_simulation)/config/planner/local_costmap_params.yaml" command="load" />
            <rosparam file="$(find rqt_simulation)/config/planner/global_costmap_params.yaml" command="load" />
            <rosparam file="$(find rqt_simulation)/config/planner/dwa_local_planner_params.yaml" command="load" />
            <rosparam file="$(find rqt_simulation)/config/planner/move_base_params.yaml" command="load" />
            <rosparam file="$(find turtlebot_navigation)/param/global_planner_params.yaml" command="load" />
            <rosparam file="$(find turtlebot_navigation)/param/navfn_global_planner_params.yaml" command="load" />

            <!-- external params file that could be loaded into the move_base namespace -->
            <rosparam file="$(arg custom_param_file)" command="load" />

            <param name="base_global_planner" value="global_planner/GlobalPlanner"/>
            <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>

            <!-- reset frame_id parameters using user input data -->
            <param name="global_costmap/global_frame" value="$(arg global_frame_id)"/>
            <param name="global_costmap/robot_base_frame" value="$(arg robot_name)/base_footprint"/>
            <param name="local_costmap/global_frame" value="$(arg robot_name)/odom"/>
            <param name="local_costmap/robot_base_frame" value="$(arg robot_name)/base_footprint"/>
            <param name="DWAPlannerROS/global_frame_id" value="$(arg robot_name)/odom"/>

            <remap from="cmd_vel" to="navigation_velocity_smoother/raw_cmd_vel"/>
            <remap from="odom" to="$(arg odom_topic)"/>
            <remap from="scan" to="$(arg laser_topic)"/>
          </node>
        </group>



</launch>
